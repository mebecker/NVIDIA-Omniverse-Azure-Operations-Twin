# SPDX-FileCopyrightText: Copyright (c) 2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: MIT
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

[package]
title = "Microsoft USD Viewer Streaming"
version = "0.1.0"
description = "Configuration for streaming deployments of Microsoft USD Viewer"
keywords = ["experience", "app", "dev", "streaming"]
template_name = "omni.streaming_configuration"

[dependencies]
"msft.usd_viewer" = {}  # Application kit file
"omni.kit.livestream.webrtc" = {}  # Livestream extension

[settings.app]
fastShutdown = true
name = "Microsoft USD Viewer Streaming"  # Application Display Name
ovc_deployment = true
renderer.skipWhileMinimized = true
renderer.resolution.height = 1080
renderer.resolution.width = 1920
vsync = false  # Vsync disabled by default, can be set to true for L40 or similar
window.scaleToMonitor = true
window.showStartup = false
window.height = 1080
window.width = 1920

[settings]
rtx.post.aa.op = 3
rtx.verifyDriverVersion.enabled = false
rtx-transient.dlssg.enabled = false  # Disable DLSS otherwise it can push the framerate above the locked limit


[settings.app.extensions]
registryEnabled = true
supportedTargets.platform = []  # Skip checking supported platform/config when building

[settings.app.exts]
folders.'++' = [  # Search paths for extensions.
    "${app}/../exts",
    "${app}/../apps",
    "${app}/../extscache"
]

[settings.app.file]
ignoreUnsavedOnExit = true

[settings.app.livestream]
skipCapture = 1  # livestream skipCapture ON for local streaming
webrtcEtli = true  # Only log error or critical level issues.

[settings.app.rendergraph]
maxFramesInFlight = 2

[settings.app.runloops]
main.rateLimitEnabled = true  # Enable rate limiting on the main thread
main.rateLimitFrequency = 60  # Lock it to 60fps
main.rateLimitUsePrecisionSleep = true  # Use precise sleep values to ensure threads sync
main.syncToPresent = true  # Sync with the present thread, smooths UI updates
present.rateLimitEnabled = true  # Rate limit the present thread
present.rateLimitFrequency = 60  # Lock it to 60fps
present.rateLimitUsePrecisionSleep = true  # Use precise sleep values to ensure threads sync
rendering_0.rateLimitEnabled = true  # Enable rate limiting for the rendering thread
rendering_0.rateLimitFrequency = 60  # Lock it to 60fps
rendering_0.rateLimitUsePrecisionSleep = true  # Use precise sleep values to ensure threads sync
rendering_0.syncToPresent = true  # Sync with the present tread, smooths UI updates
rendering_1.rateLimitEnabled = true  # Enable rate limiting for the rendering thread
rendering_1.rateLimitFrequency = 60  # Lock it to 60fps
rendering_1.rateLimitUsePrecisionSleep = true  # Use precise sleep values to ensure threads sync
rendering_1.syncToPresent = true  # Sync with the present tread, smooths UI updates

[settings.app.runLoopsGlobal]
syncToPresent = true  # Sync everything with the present thread

[settings.app.viewport]
defaults.tickRate = 60  # Lock to 60fps[settings.app]

[settings.exts."omni.kit.renderer.core"]
present.enabled = true  # Enable the present thread
present.presentAfterRendering = true  # Ensure the present thread waits for the rendering to complete[settings]

[template]
type = "ApplicationLayerTemplate" # Repo Template Metadata

